{"version":3,"sources":["pages/portfolio-pic.png","components/Container/index.js","components/Row/index.js","components/Col/index.js","pages/AboutMe.js","components/Header/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","props","className","style","children","Row","Col","size","split","map","join","AboutMe","src","Picture","alt","Navbar","to","Wrapper","App","Header","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,2C,wQCM5BC,MAJf,SAAmBC,GACjB,OAAO,yBAAKC,UAAU,YAAYC,MAAOF,EAAME,OAAQF,EAAMG,WCGhDC,MAJf,SAAaJ,GACX,OAAO,yBAAKC,UAAU,OAAOD,EAAMG,WCKtBE,MANf,SAAaL,GACX,IAAMM,EAAON,EAAMM,KAAKC,MAAM,KAAKC,KAAI,SAAAF,GAAI,MAAI,OAASA,KAAMG,KAAK,KAEnE,OAAO,yBAAKR,UAAWK,GAAON,EAAMG,W,MCwBvBO,MAtBf,WACI,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAKJ,KAAK,SACN,0CAGR,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAKA,KAAK,QACN,yBAAKL,UAAU,UAAUU,IAAKC,IAASC,IAAI,gBAE/C,kBAAC,EAAD,CAAKP,KAAK,QACN,+8B,MCLLQ,MAVf,WACE,OACE,yBAAKb,UAAU,mDACb,kBAAC,IAAD,CAAMA,UAAU,eAAec,GAAG,KAAlC,iB,MCDSC,MAJf,SAAiBhB,GACf,OAAO,0BAAMC,UAAU,WAAWD,EAAMG,WCgB3Bc,MAbf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAACC,EAAD,MACA,kBAAC,EAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,mBAAmBC,UAAWX,QCDpCY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ca79129.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/portfolio-pic.e1e7a4bc.png\";","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className=\"container\" style={props.style}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n  return <div className=\"row\">{props.children}</div>;\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\n\r\nfunction Col(props) {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n\r\n  return <div className={size}>{props.children}</div>;\r\n}\r\n\r\nexport default Col;\r\n","import React from \"react\";\r\nimport Picture from \"./portfolio-pic.png\";\r\nimport Container from \"../components/Container\"\r\nimport Row from \"../components/Row\";\r\nimport Col from \"../components/Col\";\r\nimport \"./about.css\";\r\n\r\nfunction AboutMe() {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Col size=\"lg-12\">\r\n                    <h1>About Me</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col size=\"lg-3\">\r\n                    <img className=\"profPic\" src={Picture} alt=\"ProfilePic\"/>\r\n                </Col>\r\n                <Col size=\"lg-9\">\r\n                    <p>\r\n                        Full stack web developer building on a degree in math and computer/information sciences. Currently earning a certificate in full stack web development from Rutgers University with newly honed skills in HTML, CSS, JavaScript, Node.js. Patience, professionalism, and collaborative disposition were previously put to use as a tutor for high school computer science students and as a key contributor to a research project requiring the combined skills of my college major. Outside of my current field, I worked at a wealth management firm where I perfected the communication and organizational skills which led to the success of a group effort to develop a video game application. I find myself continuously excited by each new aspect of web development, and I have a particular affinity for JavaScript. I am eager to use all of my work experience, technical skills and my steep learning curve as a full stack developer at a large tech company.\r\n                    </p>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AboutMe;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./style.css\";\r\n\r\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\r\nfunction Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-primary\">\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        Frank Buono\r\n      </Link>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <main className=\"wrapper\">{props.children}</main>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport AboutMe from './pages/AboutMe';\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header/>\n        <Wrapper>\n        <Route exact path=\"/react-portfolio\" component={AboutMe} />\n        </Wrapper>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}